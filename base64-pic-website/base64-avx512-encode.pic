.PS

arrowwid = 0.08
arrowht  = 0.2
linethick = 0.3
maxpswid = 20

hspace = 1.2

define input_item {[
    right
    A:[
        box "0" width 0.5 height 0.5 shaded "lightgray"
        box "1" same
        box "2" same
    ]

    B:[
        box "3" width 0.5 height 0.5 shaded "darkgray"
        box "4" same
        box "5" same
    ]

    C:[
        box "6" width 0.5 height 0.5 shaded "lightgray"
        box "7" same
        box "8" same
    ]

    Placeholder:box "... 39 bytes ..." width 5 height 0.5 dashed

    D:[
        box "45" width 0.5 height 0.5 shaded "darkgray"
        box "46" same
        box "47" same
    ]
]}


define intermediate_input {[
    right
    A:[
        A:box "0" width 0.5 height 0.5 shaded "lightgray"
        B:box "1" same
        C:box "2" same
          box width 0.5 height 0.5
    ]

    B:[
        A:box "3" width 0.5 height 0.5 shaded "darkgray"
        B:box "4" same
        C:box "5" same
          box width 0.5 height 0.5
    ]

    C:[
        A:box "6" width 0.5 height 0.5 shaded "lightgray"
        B:box "7" same
        C:box "8" same
          box width 0.5 height 0.5
    ]

    Placeholder:box "... 48 bytes ..." width 6 height 0.5 dashed

    D:[
        A:box "45" width 0.5 height 0.5 shaded "darkgray"
        B:box "46" same
        C:box "47" same
          box width 0.5 height 0.5
    ]
]}


define unpacked {[
    right
    A:box "a" width 0.5 height 0.5 shaded "lightblue"
    B:box "b" same
    C:box "c" same
    D:box "d" same

    E:box "d" same
    F:box "e" same
    G:box "f" same
    H:box "h" same

    I:box "i" same
    J:box "j" same
    K:box "k" same
    L:box "l" same

    Placeholder:box "" width 6 height 0.5 dashed

    M:box "m" width 0.5 height 0.5 shaded "lightblue"
    N:box "n" same
    O:box "o" same
    P:box "p" same
]}


define encoded {[
    right
    A:box "'B'" width 0.5 height 0.5 shaded "lightgreen"
    B:box "'A'" same
    C:box "'S'" same
    D:box "'E'" same

    E:box "'+'" same
    F:box "'6'" same
    G:box "'4'" same
    H:box "'+'" same

    I:box "'e'" same
    J:box "'n'" same
    K:box "'c'" same
    L:box "'o'" same

    Placeholder:box "" width 6 height 0.5 dashed

    M:box "'d'" width 0.5 height 0.5 shaded "lightgreen"
    N:box "'e'" same
    O:box "'d'" same
    P:box "'/'" same
]}

IN:input_item

down
move hspace
right
move -IN.width

OUT:intermediate_input

down
move hspace
right
move -OUT.width

UNP:unpacked

down
move hspace
right
move -OUT.width

BASE64:encoded

# connect input with intermediate

arrow from IN.A.b to OUT.A.t
arrow from IN.B.b to OUT.B.t
arrow from IN.C.b to OUT.C.t
arrow from IN.D.b to OUT.D.t


# connect intermediate with unpacked

arrow from OUT.A.A.b to UNP.A.t
arrow from OUT.A.A.b to 1/3 <UNP.B.nw,UNP.B.ne>
arrow from OUT.A.B.b to 2/3 <UNP.B.nw,UNP.B.ne>
arrow from OUT.A.B.b to 1/3 <UNP.C.nw,UNP.C.ne>
arrow from OUT.A.C.b to 2/3 <UNP.C.nw,UNP.C.ne>
arrow from OUT.A.C.b to UNP.D.t

arrow from OUT.B.A.b to UNP.E.t
arrow from OUT.B.A.b to 1/3 <UNP.F.nw,UNP.F.ne>
arrow from OUT.B.B.b to 2/3 <UNP.F.nw,UNP.F.ne>
arrow from OUT.B.B.b to 1/3 <UNP.G.nw,UNP.G.ne>
arrow from OUT.B.C.b to 2/3 <UNP.G.nw,UNP.G.ne>
arrow from OUT.B.C.b to UNP.H.t

arrow from OUT.C.A.b to UNP.I.t
arrow from OUT.C.A.b to 1/3 <UNP.J.nw,UNP.J.ne>
arrow from OUT.C.B.b to 2/3 <UNP.J.nw,UNP.J.ne>
arrow from OUT.C.B.b to 1/3 <UNP.K.nw,UNP.K.ne>
arrow from OUT.C.C.b to 2/3 <UNP.K.nw,UNP.K.ne>
arrow from OUT.C.C.b to UNP.L.t

arrow from OUT.D.A.b to UNP.M.t
arrow from OUT.D.A.b to 1/3 <UNP.N.nw,UNP.N.ne>
arrow from OUT.D.B.b to 2/3 <UNP.N.nw,UNP.N.ne>
arrow from OUT.D.B.b to 1/3 <UNP.O.nw,UNP.O.ne>
arrow from OUT.D.C.b to 2/3 <UNP.O.nw,UNP.O.ne>
arrow from OUT.D.C.b to UNP.P.t

# encode arrows

arrow from UNP.A.b to BASE64.A.t
arrow from UNP.B.b to BASE64.B.t
arrow from UNP.C.b to BASE64.C.t
arrow from UNP.D.b to BASE64.D.t
arrow from UNP.E.b to BASE64.E.t
arrow from UNP.F.b to BASE64.F.t
arrow from UNP.G.b to BASE64.G.t
arrow from UNP.H.b to BASE64.H.t
arrow from UNP.I.b to BASE64.I.t
arrow from UNP.J.b to BASE64.J.t
arrow from UNP.K.b to BASE64.K.t
arrow from UNP.L.b to BASE64.L.t
arrow from UNP.M.b to BASE64.M.t
arrow from UNP.N.b to BASE64.N.t
arrow from UNP.O.b to BASE64.O.t
arrow from UNP.P.b to BASE64.P.t

# additional comments

"step 1: load 3 bytes bundles into 32-bit words"  width 10 with .c at 1/2 <IN.Placeholder.c, OUT.Placeholder.c>
"step 2: unpack 6-bit data into individual bytes" width 10 with .c at 1/2 <OUT.Placeholder.c, UNP.Placeholder.c>
"step 3: translate to ASCII in parallel"          width 10 with .c at 1/2 <UNP.Placeholder.c, BASE64.Placeholder.c>

"48-byte input" ljust with .c at IN.e
"ZMM register" ljust with .c at OUT.e
"ZMM register" ljust with .c at UNP.e
"ZMM register" ljust with .c at BASE64.e

.PE
